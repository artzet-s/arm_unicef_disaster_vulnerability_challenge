import pandas
import pathlib
import shutil
import numpy as np
import numpy
import tqdm
import json
from PIL import Image


def set_train_val_img(df, key="location", ratio=0.80):

    unique_key = df[key].unique()
    nb_unique_key = len(unique_key)

    print("nb_unique key", nb_unique_key)

    numpy.random.shuffle(unique_key)
    train_key = unique_key[: int(nb_unique_key * ratio)]
    valid_key = unique_key[int(nb_unique_key * ratio) :]

    df["set_name"] = "train"
    df.loc[df[key].isin(train_key), "set_name"] = "train"
    df.loc[df[key].isin(valid_key), "set_name"] = "val"

    print(df["set_name"].value_counts())

    return df


def pre_process_to_jpg(train_path: pathlib.Path, output_dir: pathlib):

    df = pandas.read_csv(train_path)
    source_dir = train_path.parent.joinpath("Images")

    group = df.groupby("image_id")
    for image_id, df_group in tqdm.tqdm(group, total=len(group), desc="Convert to JPG"):
        img_path = source_dir.joinpath(f"{image_id}.tif")

        img = Image.open(img_path)
        width, height = img.size

        img.convert("RGB")
        img_path = output_dir.joinpath(f"{image_id}.jpg")
        img.save(img_path, "JPEG", quality=100)

        df.loc[df_group.index, "frame_width"] = width
        df.loc[df_group.index, "frame_height"] = height
        df.loc[df_group.index, "img_path"] = img_path

        # debug(img, df_group, image_id, data_dir)

    return df


def format_to_jpg(input_csv_path, output_csv_path, img_dirname):

    input_csv_path = pathlib.Path(input_csv_path)
    data_dir = input_csv_path.parent.joinpath(img_dirname)
    data_dir.mkdir(parents=True, exist_ok=True)

    df = pre_process_to_jpg(input_csv_path, data_dir)
    df.to_csv(output_csv_path)

    return df


def prepare_data_as_coco_format(df: pandas.DataFrame, dataset_dir: pathlib.Path):

    dataset_dir = pathlib.Path(dataset_dir)
    dataset_dir.mkdir(parents=True, exist_ok=True)
    # =========================================================================

    annotations = []
    images = []
    obj_count = 0

    # =========================================================================
    group = df.groupby(["image_id", "img_path", "frame_height", "frame_width"])
    for idx, (
        (image_id, img_path, frame_height, frame_width),
        df_group,
    ) in enumerate(tqdm.tqdm(group, total=len(group), desc="COCO format")):
        # =====================================================================
        # Copy image into dataset_dir

        base_name = f"{idx}_{pathlib.Path(img_path).stem}"
        file_name = f"{base_name}.jpg"
        image_path = dataset_dir.joinpath(file_name)
        shutil.copy(img_path, image_path)

        # =====================================================================
        # Save images in coco json format

        images.append(
            dict(
                id=idx,
                file_name=file_name,
                height=frame_height,
                width=frame_width,
            )
        )

        if "category_id" in df_group:
            cond = np.bitwise_not(df_group["category_id"].isna())
            for _, row in df_group[cond].iterrows():
                x_min, y_min, width, height = eval(row["bbox"])

                data_anno = dict(
                    image_id=idx,
                    id=obj_count,
                    category_id=int(row["category_id"]) - 1,
                    bbox=[x_min, y_min, width, height],
                    area=width * height,
                    segmentation=[],
                    iscrowd=0,
                )
                annotations.append(data_anno)
                obj_count += 1

    # =========================================================================

    coco_format_json = dict(
        images=images,
        annotations=annotations,
        categories=[
            {"id": 0, "name": "0"},
            {"id": 1, "name": "1"},
            {"id": 2, "name": "2"},
        ],
    )
    with open(dataset_dir.joinpath("annotation_coco.json"), "w") as f:
        json.dump(coco_format_json, f, indent=4)


def load_json(path):
    with open(path, "r") as f:
        return json.load(f)


def process_codetr(pred_path, out_filename, score=0.5):

    test_data = load_json(
        "/home/neuronalys/Projects/simon/code/data/dataset/contest/roofed_house/coco/test/annotation_coco.json"
    )

    test_data_pred = load_json(pred_path)

    df_pred = pandas.DataFrame(test_data_pred)
    df_pred = df_pred[df_pred["score"] >= score]
    rows = list()
    for img_info in test_data["images"]:

        nb_1 = 0
        nb_2 = 0
        nb_3 = 0

        cond = df_pred["image_id"] == img_info["id"]
        if np.any(cond):
            df_img = df_pred[cond]

            nb_1 = np.count_nonzero(df_img["category_id"] == 0)
            nb_2 = np.count_nonzero(df_img["category_id"] == 1)
            nb_3 = np.count_nonzero(df_img["category_id"] == 2)

        image_id = (
            img_info["file_name"].replace(f"{ img_info['id']}_", "").replace(".jpg", "")
        )

        rows.append({"image_id": f"{image_id}_1", "Target": nb_1})
        rows.append({"image_id": f"{image_id}_2", "Target": nb_2})
        rows.append({"image_id": f"{image_id}_3", "Target": nb_3})

    df = pandas.DataFrame(rows)
    df.to_csv(out_filename, index=False)


if __name__ == "__main__":

    # =========================================================================
    # First step is to convert image data and csv into JPG

    df_train = format_to_jpg(
        input_csv_path="./data/Train.csv",
        output_csv_path="./data/data_train_valid_jpg.csv",
        img_dirname="train_img",
    )

    df_test = format_to_jpg(
        input_csv_path="./data/Test.csv",
        output_csv_path="./data/data_test_jpg.csv",
        img_dirname="test_img",
    )

    # =========================================================================
    # Split train data into two set ("train" and "valid" with 90/10 ratio)
    df_train = pandas.read_csv("./data/data_train_valid_jpg.csv")
    df_train = set_train_val_img(df_train, key="image_id", ratio=0.90)
    df_train.to_csv("./data/data_train_valid_jpg.csv")

    # =========================================================================
    # Convert data to COCO format

    df = pandas.read_csv("./data/data_train_valid_jpg.csv")

    prepare_data_as_coco_format(
        df[df["set_name"] == "train"],
        "./data/coco/train",
    )

    prepare_data_as_coco_format(
        df[df["set_name"] == "val"],
        "./data/coco/val",
    )

    df = pandas.read_csv("./data/data_test_jpg.csv")
    prepare_data_as_coco_format(
        df,
        "./data/coco/test",
    )
