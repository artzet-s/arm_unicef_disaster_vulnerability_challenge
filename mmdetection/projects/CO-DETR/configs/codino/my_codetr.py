# The new config inherits a base config to highlight the necessary modification
_base_ = "co_dino_5scale_swin_l_16xb1_16e_o365tococo.py"

# We also need to change the num_classes in head to match the dataset's annotation
# model = dict(
#     roi_head=dict(query_head=dict(num_classes=1), roi_head=dict(num_classes=1))
# )

# Modify dataset related settings
data_root = "./data/coco/"
metainfo = {
    "classes": ("0", "1", "2"),
    "palette": [
        (255, 0, 0),
        (0, 255, 0),
        (0, 0, 255),
    ],
}

train_dataloader = dict(
    batch_size=1,
    num_workers=4,
    dataset=dict(
        data_root=data_root,
        metainfo=metainfo,
        ann_file="train/annotation_coco.json",
        data_prefix=dict(img="train/"),
    ),
)
val_dataloader = dict(
    dataset=dict(
        data_root=data_root,
        metainfo=metainfo,
        ann_file="val/annotation_coco.json",
        data_prefix=dict(img="val/"),
    )
)

# test_dataloader = val_dataloader
test_dataloader = dict(
    dataset=dict(
        data_root=data_root,
        metainfo=metainfo,
        ann_file="test/annotation_coco.json",
        data_prefix=dict(img="test/"),
    ),
)

# Modify metric related settings
val_evaluator = dict(ann_file=data_root + "val/annotation_coco.json")
# test_evaluator = val_evaluator
test_evaluator = dict(
    ann_file=data_root + "test/annotation_coco.json",
    outfile_prefix="./work_dirs/my_codetr/test",
)


optim_wrapper = dict(optimizer=dict(lr=0.0001))

max_epochs = 25
train_cfg = dict(max_epochs=max_epochs)


# # My visualizer with WANDB
# vis_backends = [
#     dict(type="LocalVisBackend"),
#     dict(
#         type="WandbVisBackend",
#         init_kwargs={
#             "project": "MMDetection-tutorial",
#             "group": "tuto_1",
#         },
#     ),
# ]
# visualizer = dict(
#     type="DetLocalVisualizer", vis_backends=vis_backends, name="visualizer"
# )
